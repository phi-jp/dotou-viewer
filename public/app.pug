app
  div.f.h-full
    div.side.w300.flex-fixed.bg-whitesmoke.overflow-scroll(ref='menus')
      h1.fs20.f.fh.py32 {config.title}

      //- html の場合
      div(if='{!config.type || config.type === "html"}')
        div.mb32(each='{section in config.sections}')
          h2.fs14.pl16.mb16 {section.id}. {section.label}
          div(each='{item in section.items}', class='{"text-royalblue": currentItem === item}')
            a.link-item.block.px16.py8(href='./{section.id}/{item.id}.html', target='preview', onclick='{onclick}', data-hash='{section.id}/{item.id}')
              span.fs12.line-clamp-1 {item.id}. {item.label}
      //- pug の場合
      div(if='{config.type === "pug"}')
        div.mb32(each='{section in config.sections}')
          h2.fs14.pl16.mb16 {section.id}. {section.label}
          div(each='{item in section.items}', class='{"text-royalblue": currentItem === item}')
            a.link-item.block.px16.py8(href='./{section.id}/{item.id}', data-file='./{section.id}/{item.id}.pug', target='preview', onclick='{onclick}', data-hash='{section.id}/{item.id}')
              span.fs12.line-clamp-1 {item.id}. {item.label}
    div.main.w-full.f
      div#code.col8.h-full.p16
        div.f.flex-between.fm.mb16
          h2 {currentItem.id}. {currentItem.label}
          div.f.fm
            a.button.ml8(href='{refs.preview.contentWindow && refs.preview.contentWindow.location.href}', target='_blank')
              i.material-icons fullscreen
            button.button.ml8(onclick='{reload}')
              i.material-icons refresh
        pre(if='{code}')
          code.fs13 {code}
      div#preview.col4.h-full.p16.bg-whitesmoke
        iframe.bg-white.border-none.s-full(name='preview', ref='preview')
  style(scoped, type='less').
    :scope {
      display: block;
      height: 100vh;
    }
  script.
    this.config = {};
    this.currentItem = {};
    this.on('mount', async () => {
      var res = await fetch('/config');
      this.config = await res.json();
      this.update();

      var hash = location.hash.substr(1);
      if (hash) {
        // var [section_id, item_id] = hash.split('/');
        var target = document.querySelector(`[data-hash="${hash}"]`);
      }
      else {
        var target = document.querySelector('.link-item');
      }
      
      target.click();
      $(this.refs.menus).animate({
        scrollTop: target.offsetTop - 30,
      });

      // split
      var sizes = localStorage.getItem('split-sizes');
      sizes = sizes ? JSON.parse(sizes) : [50, 50];

      Split(['#code', '#preview'], {
        sizes: sizes,
        onDragEnd: (sizes) => {
          localStorage.setItem('split-sizes', JSON.stringify(sizes));
        }
      });
    });
    this.onclick = async (e) => {
      location.hash = e.currentTarget.dataset.hash;

      var file = e.currentTarget.href;
      // pug 対応
      if (this.config.type === 'pug') {
        file = file += '.pug';
      }
      var res = await fetch(file);
      
      this.currentItem = e.item.item;
      this.code = null;
      this.update();
      this.code = await res.text();
      this.update();
      
      document.querySelectorAll('pre code').forEach((block) => {
        hljs.highlightBlock(block);
      });
    };

    this.reload = () => {
      var hash = location.hash.substr(1);
      var target = document.querySelector(`[data-hash="${hash}"]`);
      target.click();
    };