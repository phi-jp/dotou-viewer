app
  div.f.h-full
    div.side.w300.flex-fixed.bg-whitesmoke.overflow-scroll(ref='menus')
      h1.fs20.f.fh.py32
        a(href='/') {config.title}
      div
        div.mb32(each='{section in config.sections}')
          h2.fs14.pl16.mb16 {section.label}
          div.ml8(each='{item in section.items}', class='{"text-royalblue": currentItem === item}')
            a.link-item.block.px16.py8(href='/{content_id}/{section.id}/{item.id}', onclick='{onclick}', data-hash='{section.id}/{item.id}')
              span.fs12.line-clamp-1 {item.label}
    div.main.w-full.f(show='{currentItem}')
      div#code.col8.h-full.p16.f.flex-column.overflow-scroll
        div.h60per.f.flex-column.pb16
          div.f.flex-between.fm.mb16
            div
              h2 {currentItem.id}. {currentItem.label}
              p(if='{currentItem.description}') {currentItem.description}
            div.f.fm
              a.button.ml8(href='{currentItem.path}', target='_blank')
                i.material-icons play_arrow
              button.button.ml8(onclick='{reload}')
                i.material-icons refresh
          pre.overflow-scroll(if='{code}')
            code.fs13 {code}
        div.h40per
          div.h-full.box-shadow-2(data-is='module-console')
      div#preview.col4.h-full.p16.bg-whitesmoke.relative
        iframe.bg-white.border-none.s-full.box-shadow(name='preview', ref='preview', src='{currentItem.path}', class='{"fixed trbl0": mode === "fullscreen"}')

        div.absolute.t0.r0.p32
          button.button.ml8(onclick='{expand}', if='{mode !== "fullscreen"}')
            i.material-icons fullscreen
          button.button.ml8(onclick='{shrink}', if='{mode === "fullscreen"}')
            i.material-icons fullscreen_exit
  style(scoped, type='less').
    :scope {
      display: block;
      height: 100vh;

      .gutter {
        background-color: hsla(0, 0%, 0%, 0.20);
        cursor: col-resize;
      }
      .box-shadow {
        box-shadow: 0px 0px 8px #aaa;
      }
    }
  script.
    riot.util.tmpl.errorHandler = function() {};

    this.content_id = location.pathname.replace(/\//g, '');

    this.on('mount', async () => {
      // setup config
      await this.fetchConfig();

      var hash = location.hash.substr(1);
      if (hash) {
        // var [section_id, item_id] = hash.split('/');
        var target = document.querySelector(`[data-hash="${hash}"]`);
        target.click();
        $(this.refs.menus).animate({
          scrollTop: target.offsetTop - 30,
        });
      }

      this.watch();
      
      // split
      var sizes = localStorage.getItem('split-sizes');
      sizes = sizes ? JSON.parse(sizes) : [50, 50];

      Split(['#code', '#preview'], {
        sizes: sizes,
        onDragEnd: (sizes) => {
          localStorage.setItem('split-sizes', JSON.stringify(sizes));
        }
      });

      this.updateMode();
    });

    this.fetchConfig = async () => {
      var res = await fetch(`/${this.content_id}/contents.yaml`);
      var text = await res.text();

      // 更新があったらセットする
      if (this.configText !== text) {
        this.config = jsyaml.load(text);
        this.configText = text;
        this.update();
        console.log('%cdotou viewer log: update config', 'color: blue');
      }
    };

    this.fetchCode = async (filename) => {
      var res = await fetch(filename);
      var code = await res.text();

      if (this.code != code) {
        this.code = null;
        this.update();
        this.code = code;
        this.update();

        document.querySelectorAll('pre code').forEach((block) => {
          hljs.highlightBlock(block);
        });

        return true;
      }

      return false;
    };

    this.watch = async () => {
      this.fetchConfig();

      if (this.currentItem) {
        var is_refresh = await this.fetchCode(this.currentItem.filename);

        if (is_refresh) {
          this.reload();
        }
      }
      // 再帰呼び出し
      setTimeout(() => {
        this.watch();

      }, 2 * 1000);
    };

    this.onclick = async (e) => {
      e.preventDefault();
      location.hash = e.currentTarget.dataset.hash;

      var filename = e.currentTarget.href;
      // pug 対応
      if (this.config.type === 'pug') {
        filename = filename += '.pug';
      }
      else if (this.config.type === 'riot') {
        filename = filename += '.pug';
      }
      this.currentItem = e.item.item;
      this.currentItem.path = `/${this.content_id}/${e.currentTarget.dataset.hash}`;
      this.currentItem.filename = filename;

      this.tags['module-console'].clear();

      this.fetchCode(filename);
    };

    this.reload = () => {
      this.tags['module-console'].clear();

      this.refs.preview.contentWindow.location.reload();
    };

    this.expand = () => {
      var url = `${location.pathname}?mode=fullscreen${location.hash}`;
      history.pushState(null, null, url);
      this.updateMode();
    };

    this.shrink = () => {
      var url = `${location.pathname}${location.hash}`;
      history.pushState(null, null, url);
      this.updateMode();
    };

    window.addEventListener('popstate', () => {
      this.updateMode();
    }, false);

    this.updateMode = () => {
      // setup query
      var obj = {};
      location.search.substr(1).split('&').forEach(pair => {
        var [key, value] = pair.split('=');
        obj[key] = value;
      });

      if (obj.mode === 'fullscreen') {
        this.mode = 'fullscreen';
      }
      else {
        this.mode = '';
      }
      this.update();
    };

    window.addEventListener('message', (e) => {
      var data = JSON.parse(e.data);
      this.tags['module-console'].log(data);
    });


module-console
  div.h-full.overflow-hidden.f.flex-column
    div.p8.border-bottom.bg-whitesmoke
      span.bold.fs12.bold console

    div.overflow-scroll
      div.border-bottom(each='{log in logs}')
        div.px8.py4.fs13 {log}

  script.
    this.logs = [];

    this.log = (data) => {
      this.logs.push(data.args.join(' '));
      this.update();
    };

    this.clear = () => {
      this.logs = [];
      this.update();
    };